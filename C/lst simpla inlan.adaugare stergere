Adaugare, stergere lista simplu inlantuita


#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <ctype.h>


typedef struct elem

{

    float info;

    struct elem *urm;

} nod; 


/* cauta in lista indicata de p nodul cu campul info = inf si

returneaza pointerul catre acel nod, daca nodul cautat nu exista returneaza NULL  */

nod *caut(nod *p, float inf)

{

    for ( ; p!=NULL && p->info<inf; p=p->urm);

/* cautam doar pana la primul element mai mare decat inf (daca el nu exista),

deoarece lista e ordonata, deci nu mai are sens sa parcurgem mai departe*/

    if (p!=NULL && inf==p->info)

         return p; /* daca info a fost gasit in lista */

    return NULL;  /* daca nu a fost gasita */

} 


/*   Functia listez parcurge lista si pentru fiecare nod

   afiseaza informatia memorata.       */

void listez(nod *p)

{

    printf("Un nod ocupa %d octeti, pointerul catre nod ocupa %d octeti\n",

  sizeof(*p), sizeof(p));

    for ( ; p!=NULL; p=p->urm)

         printf("(adr=%p) |%6g| %p | \n",p,p->info, p->urm);

} 


/* Functia sterg elimina din lista (indicata de pointerul

   p) nodul ce are campul info egal cu argumentul inf     */

nod *sterg(nod *radacina, float inf)

{

    nod *aux, *p;

    if (radacina==NULL){  // lista vida

         printf("Eroare: lista e vida\n");

         return NULL;

    }

    else

         if (radacina->info==inf){   // sterg primul element

               aux=radacina;

               radacina=radacina->urm;

               free(aux);

               return radacina;

         }

         else{

            // parcurgem lista pana gasim nodul cu info=infonou sau pana la sfarsit

            for(p=radacina; p->urm!=NULL && p->urm->info<inf; p=p->urm);

            if (p->urm != NULL  && p->urm->info==inf) // nodul cautat exista

            {

               aux=p->urm;

               p->urm=aux->urm;  // adica p->urm=p->urm->urm;

               free(aux);

            }

            else     // nodul cautat nu exista

               printf("Eroare: identificatorul %f nu apare in lista\n", inf);

            return radacina;

         }

  } 


/*Functia introduc insereaza un nod  in lista ordonata,

Functia returneaza pointerul catre inceputul listei modificate  */

nod * introduc(nod *radacina, float infonou)

{

    nod  *nou, *p;

    if ((nou=(nod *)malloc(sizeof(nod)))==NULL)

    {

 

         printf("Eroare: memorie insuficienta\n");

         return NULL;

    }

    nou->info=infonou;    /* se salveaza infonou in nodul nou */

    nou->urm=NULL;

  
    if (radacina==NULL)   // lista vida

         radacina=nou;

    else

         if (p->info>infonou){   // iintroduc la inceput

             nou->urm=radacina;

             radacina=nou;

         }

         else{   // inserare in int listei sau la sfarsit

            for(p=radacina; p->urm!=NULL && p->urm->info<infonou; p=p->urm);

            nou->urm=p->urm;

            p->urm=nou;

         }

         return radacina;

} 




void main(void)

{

    char o;

    float val;

    nod *radacina=NULL, *p;     /* pastreaza inceputul listei */

    puts("");

    while(1) 

    {

         puts("");

         /* se afiseaza meniul programului */

         puts("a : adauga un nod");

         puts("c : cauta si tipareste un nod");

         puts("s : sterge un nod");

         puts("l : listeaza tot");

         puts("t : termina programul");

         printf("\nOptiunea: ");

         while(isspace(o=getchar()) );

         puts("");

         switch (tolower(o))

         {

         case 'a': {  printf("adauga  nr=");

                scanf("%f", &val);

                radacina=introduc(radacina, val);

             break;}

         case 'c': {  puts("cauta si tipareste un nod");

                printf("nr=");

                scanf("%f", &val);

                if ((p=caut(radacina, val))!=NULL) /* cauta nodul in lista */

                  printf(" Valoare:%f\n", p->info);

                else

                  printf("Eroare: Identificator nedefinit\n");

             break;

         }

         case 's':{   printf("stergere  nr=");

                scanf("%f", &val);

             radacina=sterg(radacina, val); /* sterge nodul din lista */

             break;}

         case 'l':{  puts("listare");

             listez(radacina);

             break;}

         case 't':

             return;

         default:

             printf("Eroare : Comanda inexistenta\n");

         }

   } 


}